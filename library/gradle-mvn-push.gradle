apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUser() {
    return hasProperty('SONATYPE_USER') ? SONATYPE_USER : ""
}

def getRepositoryToken() {
    return hasProperty('SONATYPE_TOKEN') ? SONATYPE_TOKEN : ""
}

def getReleaseUrl() {
    return isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId=GROUP
                version=VERSION_NAME
                artifactId=POM_ARTIFACT_ID

                pom {
                    name=POM_NAME
                    packaging=POM_PACKAGING
                    description=POM_DESCRIPTION
                    url=POM_URL

                    scm {
                        url=POM_SCM_URL
                        connection=POM_SCM_CONNECTION
                        developerConnection=POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name=POM_LICENCE_NAME
                            url=POM_LICENCE_URL
                            distribution=POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id=POM_DEVELOPER_ID
                            name=POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "sonatype"
                url = getReleaseUrl()

                credentials {
                    username getRepositoryUser()
                    password getRepositoryToken()
                }
            }
        }
    }

    signing {
        sign publishing.publications
    }

    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        android.libraryVariants.all { variant ->
            if (variant.name == 'release') {
                owner.classpath += variant.javaCompileProvider.get().classpath
            }
        }

        exclude '**/R.html', '**/R.*.html', '**/index.html'
        options.encoding 'utf-8'
        options {
            addStringOption 'docencoding', 'utf-8'
            addStringOption 'charset', 'utf-8'
            links 'https://docs.oracle.com/javase/7/docs/api/'
            links 'https://d.android.com/reference'
            links 'https://developer.android.com/reference/androidx/'
        }
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        archiveClassifier.set('javadoc')
        from androidJavadoc.destinationDir

        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    task javaSourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs

        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}