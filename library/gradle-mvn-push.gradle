apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId=GROUP
                version=VERSION_NAME
                artifactId=POM_ARTIFACT_ID

                pom {
                    name=POM_NAME
                    packaging=POM_PACKAGING
                    description=POM_DESCRIPTION
                    url=POM_URL

                    scm {
                        url=POM_SCM_URL
                        connection=POM_SCM_CONNECTION
                        developerConnection=POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name=POM_LICENCE_NAME
                            url=POM_LICENCE_URL
                            distribution=POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id=POM_DEVELOPER_ID
                            name=POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "SonatypeSnapshot"
                url = getSnapshotRepositoryUrl()

                credentials {
                    username getRepositoryUsername() //ossrhUsername
                    password getRepositoryPassword() //ossrhPassword
                }
            }

            maven {
                name = "sonatype"

                //def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                //def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                def releasesRepoUrl = getReleaseRepositoryUrl()
                def snapshotsRepoUrl = getSnapshotRepositoryUrl()
                url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
                //url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                //url = getReleaseRepositoryUrl()

                credentials {
                    username getRepositoryUsername() //ossrhUsername
                    password getRepositoryPassword() //ossrhPassword
                }
            }
        }
    }

    /*
    signing {
        //sign publishing.publications
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
     */

    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        android.libraryVariants.all { variant ->
            if (variant.name == 'release') {
                owner.classpath += variant.javaCompileProvider.get().classpath
            }
        }

        exclude '**/R.html', '**/R.*.html', '**/index.html'
        options.encoding 'utf-8'
        options {
            addStringOption 'docencoding', 'utf-8'
            addStringOption 'charset', 'utf-8'
            links 'https://docs.oracle.com/javase/7/docs/api/'
            links 'https://d.android.com/reference'
            links 'https://developer.android.com/reference/androidx/'
        }
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        archiveClassifier.set('javadoc')
        from androidJavadoc.destinationDir

        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    task javaSourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs

        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

/*
afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}


 */